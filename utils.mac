%include "memory.mac"

%define BREAKPOINT xchg bx, bx

; This macro can only be used once: this is fine, we are putting it an a macro
; for readability
; Input: nothing
; Output: keycode in AL
%macro GETKEY 0
    ; int16/ah=11h: Keyboard: Check for enhanced stroke
    mov ah, 0x11
    int 0x16

    ; ZF clear if keystroke available: return it.
    jne getkey_return_popped_key
    ; else: return 0
    xor ax, ax
    jmp getkey_continue
getkey_return_popped_key:
    ; int16/ah=10h: Keyboard: Get enhanced stroke
    mov ah, 0x10
    int 0x16
    ; Returns character in AL, scan code in AH. Clear top half of ax
    mov ah, 0
getkey_continue:
%endmacro

%macro SLEEP 0
    mov ah, 0x86
    ; cx - high word
    ; dx - low word
    xor cx, cx
    mov dx, 0x8000
    int 15h
%endmacro

%macro CLS 0
    ; set screen to gray
    mov cx, VGA_SIZE
    xor di, di
    mov al, 0x14
    rep stosb
%endmacro

%macro COPY_BOARD 2
    mov si, %1
    mov di, %2
    mov cx, BOARD_WIDTH * BOARD_HEIGHT
    rep movsb
%endmacro

%macro MERGE_BOARD 2
    mov cx, BOARD_WIDTH * BOARD_HEIGHT
%%or_loop:
    mov si, cx
    mov al, [si+%1]
    or [si+%2], al
    loop %%or_loop
%endmacro

%macro COLLIDE_BOARDS 2
    mov cx, BOARD_WIDTH * BOARD_HEIGHT
%%collide_loop:
    mov si, cx
    mov al, [si+%1]
    and al, [si+%2]
    ; loope will loop until the and above returned not zero, aka we collided
    loope %%collide_loop
%endmacro

%macro CLEAR_BOARD 2
    mov cx, BOARD_WIDTH * BOARD_HEIGHT + %2
    mov di, %1
    xor ax, ax
    rep stosb
%endmacro

%macro DEFINE_BLOCK 2
    db (%1 << 4) | %2
%endmacro
